{"version":3,"sources":["transformers/utils.js","data-merger.js","components/CopyHelper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_","require","Transformer","transformGivenName","obj","name","givenName","omit","transformSurname","romanization","surname","originalSurname","module","exports","popularGivenNames","popularSurnamesInAsia","popularSurnamesInEurope","popularSurnamesInSouthAmerica","popularSurnamesInNorthAmerica","popularSurnamesInOceania","transform","Merger","getAllSurnames","map","pickMergeableDataByGroupKey","givenNames","surnames","groupKey","groupedGivenNames","groupBy","groupedSurnames","pick","Object","keys","merge","result","entries","continent","continentGivenNames","continentSurnames","givenNamesByRegion","surnamesByRegion","region","regionGivenNames","shuffle","regionSurnames","minLength","min","length","slice","push","zipWith","item","value","useStyles","makeStyles","theme","root","display","formControl","margin","spacing","button","Container","styled","div","TextareaAutosizeStyled","TextareaAutosize","CopyHelper","data","classes","useState","fields","setFields","selectedFields","setSelectedFields","fieldsDelimiter","setFieldsDelimiter","rowDelimiter","setRowDelimiter","rowWrapper","setRowWrapper","invertFields","setInvertFields","openSnackbar","setOpenSnackbar","useEffect","newSelectedFields","pickBy","v","reverse","handleFieldCheckboxChange","event","target","checked","join","values","fieldsError","filter","className","FormControl","required","error","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","label","FormHelperText","RadioGroup","aria-label","Radio","replace","Switch","Button","variant","color","size","onClick","copy","startIcon","rowsMin","placeholder","Snackbar","key","open","autoHideDuration","onClose","message","createMuiTheme","GlobalStyle","createGlobalStyle","AppBox","columns","options","sort","filterType","selectableRows","disableToolbarSelect","rowsPerPageOptions","App","merger","setData","rowsSelected","setRowsSelected","onRowsSelect","_currentRowsSelected","randomizeData","customToolbar","Tooltip","title","IconButton","dataIndex","getDataByRowIndex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"04tWAAA,IAAMA,EAAIC,EAAQ,IAEZC,EAAc,aAEpBA,EAAYC,mBAAqB,SAACC,GAKhC,OAJIA,EAAIC,OACND,EAAIE,UAAYF,EAAIC,MAGfL,EAAEO,KAAKH,EAAK,CAAC,UAGtBF,EAAYM,iBAAmB,SAACJ,GAU9B,OATIA,EAAIK,cACNL,EAAIM,QAAUN,EAAIK,aACdL,EAAIC,OACND,EAAIO,gBAAkBP,EAAIC,OAEnBD,EAAIC,OACbD,EAAIM,QAAUN,EAAIC,MAGbL,EAAEO,KAAKH,EAAK,CAAC,OAAQ,OAAQ,kBAGtCQ,EAAOC,QAAUX,G,+MCzBXF,EAAIC,EAAQ,IACZa,EAAoBb,EAAQ,KAC5Bc,EAAwBd,EAAQ,KAChCe,EAA0Bf,EAAQ,KAClCgB,EAAgChB,EAAQ,KACxCiB,EAAgCjB,EAAQ,KACxCkB,EAA2BlB,EAAQ,KACnCmB,EAAYnB,EAAQ,KAEpBoB,EAAS,aAEfA,EAAOC,eAAiB,WACtB,MAAM,GAAN,mBACKtB,EAAEuB,IAAIR,EAAuBK,EAAUZ,mBAD5C,YAEKR,EAAEuB,IAAIP,EAAyBI,EAAUZ,mBAF9C,YAGKR,EAAEuB,IAAIN,EAA+BG,EAAUZ,mBAHpD,YAIKR,EAAEuB,IAAIL,EAA+BE,EAAUZ,mBAJpD,YAKKR,EAAEuB,IAAIJ,EAA0BC,EAAUZ,qBAIjDa,EAAOG,4BAA8B,SAACC,EAAYC,EAAUC,GAC1D,IAAIC,EAAoB5B,EAAE6B,QAAQJ,EAAYE,GAC1CG,EAAkB9B,EAAE6B,QAAQH,EAAUC,GAK1C,MAAO,CAHPC,EAAoB5B,EAAE+B,KAAKH,EAAmBI,OAAOC,KAAKH,IAC1DA,EAAkB9B,EAAE+B,KAAKD,EAAiBE,OAAOC,KAAKL,MAKxDP,EAAOa,MAAQ,WACb,IAAIT,EAAazB,EAAEuB,IAAIT,EAAmBM,EAAUjB,oBAChDuB,EAAWL,EAAOC,iBAFH,EAGMD,EAAOG,4BAC9BC,EACAC,EACA,aANiB,mBAGlBD,EAHkB,KAGNC,EAHM,KAUnB,IADA,IAAMS,EAAS,GACf,MAA6CH,OAAOI,QAAQX,GAA5D,eAUE,IAVwE,IAAD,0BAA/DY,EAA+D,KAApDC,EAAoD,KACjEC,EAAoBb,EAASW,GADoC,EAKnEhB,EAAOG,4BACTc,EACAC,EACA,UARqE,mBAGrEC,EAHqE,KAIrEC,EAJqE,KAUvE,MAAuCT,OAAOI,QAAQI,GAAtD,eAA2E,CAAC,IAAD,0BAAjEE,EAAiE,KAAzDC,EAAyD,KACzEA,EAAmB3C,EAAE4C,QAAQD,GAC7B,IAAIE,EAAiB7C,EAAE4C,QAAQH,EAAiBC,IAC1CI,EAAY9C,EAAE+C,IAAI,CAACJ,EAAiBK,OAAQH,EAAeG,SAEjEL,EAAmB3C,EAAEiD,MAAMN,EAAkB,EAAGG,GAChDD,EAAiB7C,EAAEiD,MAAMJ,EAAgB,EAAGC,GAE5CX,EAAOe,KAAP,MAAAf,EAAM,YACDnC,EAAEmD,QAAQR,EAAkBE,GAAgB,SAACO,EAAMC,GACpD,OAAO,eAAKD,EAAZ,GAAqBC,QAM7B,OAAOrD,EAAE4C,QAAQT,IAWJd,Q,mWCtDf,IAAMiC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,QAEXC,YAAa,CACXC,OAAQJ,EAAMK,QAAQ,IAExBC,OAAQ,CACNF,OAAQJ,EAAMK,QAAQ,QAIpBE,EAAYC,IAAOC,IAAV,KAITC,GAAyBF,YAAOG,IAAPH,CAAH,KAmJbI,GA9IqB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAC/BC,EAAUhB,IADqC,EAGzBiB,mBAAc,CAAC,WAAa,EAAM,SAAW,IAHpB,mBAG9CC,EAH8C,KAGtCC,EAHsC,OAITF,mBAAgB,CAAC,YAAa,YAJrB,mBAI9CG,EAJ8C,KAI9BC,EAJ8B,OAKPJ,mBAAiB,KALV,mBAK9CK,EAL8C,KAK7BC,EAL6B,OAMbN,mBAAiB,MANJ,mBAM9CO,EAN8C,KAMhCC,EANgC,OAOjBR,mBAAiB,IAPA,mBAO9CS,EAP8C,KAOlCC,EAPkC,OAQbV,oBAAkB,GARL,mBAQ9CW,EAR8C,KAQhCC,EARgC,OASbZ,oBAAkB,GATL,mBAS9Ca,EAT8C,KAShCC,EATgC,KAWrDC,qBAAU,WACR,IAAMC,EAAoBvD,OAAOC,KAAKjC,IAAEwF,OAAOhB,GAAQ,SAACiB,GAAD,OAAa,IAANA,MAE5Dd,EADEO,EACgBK,EAAkBG,UAElBH,KAErB,CAACf,EAAQU,IAEV,IAAMS,EAA4B,SAACC,GACjCnB,EAAU,eAAKD,EAAN,eAAeoB,EAAMC,OAAOxF,KAAOuF,EAAMC,OAAOC,YAyB3DzB,EAAOrE,IAAE+F,KACP/F,IAAEuB,IACA8C,GACA,SAACjE,GAAD,gBAAY4E,GAAZ,OAAyBhF,IAAE+F,KACzB/D,OAAOgE,OACLhG,IAAE+B,KACA3B,EACAsE,IAGJE,IAPF,OAQII,MAENF,GA3DmD,IA8D7CxE,EAAuBkE,EAAvBlE,UAAWI,GAAY8D,EAAZ9D,QACbuF,GAAc,CAAC3F,EAAWI,IAASwF,QAAO,SAACT,GAAD,OAAOA,KAAGzC,OAAS,EAEnE,OACE,kBAACe,EAAD,KACE,yBAAKoC,UAAW7B,EAAQb,MACxB,kBAAC2C,EAAA,EAAD,CAAaC,UAAQ,EAACC,MAAOL,GAAaM,UAAU,WAAWJ,UAAW7B,EAAQX,aAChF,kBAAC6C,EAAA,EAAD,CAAWD,UAAU,UAArB,kBACA,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUd,QAASxF,EAAWuG,SAAUlB,EAA2BtF,KAAK,cACjFyG,MAAM,eAER,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAACC,EAAA,EAAD,CAAUd,QAASpF,GAASmG,SAAUlB,EAA2BtF,KAAK,YAC/EyG,MAAM,aAGTb,IAAe,kBAACc,EAAA,EAAD,2BAElB,kBAACX,EAAA,EAAD,CAAaG,UAAU,WAAWJ,UAAW7B,EAAQX,aACnD,kBAAC6C,EAAA,EAAD,CAAWD,UAAU,UAArB,oBACA,kBAACS,EAAA,EAAD,CAAYC,aAAW,mBAAmB5G,KAAK,mBAAmBgD,MAAOuB,EAAiBiC,SA5D7D,SAACjB,GAClCf,EAAoBe,EAAMC,OAA4BxC,SA4DhD,kBAACqD,EAAA,EAAD,CAAkBrD,MAAM,IAAIsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,cACtD,kBAACJ,EAAA,EAAD,CAAkBrD,MAAM,KAAKsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,iBAG3D,kBAACV,EAAA,EAAD,CAAaG,UAAU,WAAWJ,UAAW7B,EAAQX,aACnD,kBAAC6C,EAAA,EAAD,CAAWD,UAAU,UAArB,iBACA,kBAACS,EAAA,EAAD,CAAYC,aAAW,gBAAgB5G,KAAK,gBAAgBgD,MAAOyB,EAAc+B,SA/DtD,SAACjB,GAChCb,EAAiBa,EAAMC,OAA4BxC,MAAM8D,QAAQ,MAAO,SA+DlE,kBAACT,EAAA,EAAD,CAAkBrD,MAAM,MAAKsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,gBAAehB,QAA0B,OAAjBhB,IAC/E,kBAAC4B,EAAA,EAAD,CAAkBrD,MAAM,KAAKsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,eACvD,kBAACJ,EAAA,EAAD,CAAkBrD,MAAM,KAAKsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,mBACvD,kBAACJ,EAAA,EAAD,CAAkBrD,MAAM,OAAMsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,yBAAwBhB,QAA0B,QAAjBhB,IACzF,kBAAC4B,EAAA,EAAD,CAAkBrD,MAAM,OAAMsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,6BAA4BhB,QAA0B,QAAjBhB,MAGjG,kBAACsB,EAAA,EAAD,CAAaG,UAAU,WAAWJ,UAAW7B,EAAQX,aACnD,kBAAC6C,EAAA,EAAD,CAAWD,UAAU,UAArB,eACA,kBAACS,EAAA,EAAD,CAAYC,aAAW,cAAc5G,KAAK,cAAcgD,MAAO2B,EAAY6B,SArElD,SAACjB,GAC9BX,EAAeW,EAAMC,OAA4BxC,SAqE3C,kBAACqD,EAAA,EAAD,CAAkBrD,MAAM,GAAGsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,SACrD,kBAACJ,EAAA,EAAD,CAAkBrD,MAAM,IAASsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,sBAC3D,kBAACJ,EAAA,EAAD,CAAkBrD,MAAM,IAAIsD,QAAS,kBAACO,EAAA,EAAD,MAAWJ,MAAM,wBAG1D,kBAACV,EAAA,EAAD,CAAaG,UAAU,WAAWJ,UAAW7B,EAAQX,aACrD,kBAAC6C,EAAA,EAAD,CAAWD,UAAU,UAArB,uBACA,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAACS,EAAA,EAAD,CAAQtB,QAASZ,EAAc2B,SA3Ef,SAACjB,GAChCT,EAAgBS,EAAMC,OAAOC,SAC7BnB,EAAkBD,EAAegB,YAyEiDrF,KAAK,kBACjFyG,MAAM,yBAGV,kBAACC,EAAA,EAAD,2EAEA,6BACE,kBAACM,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,KAAK,QACLrB,UAAW7B,EAAQR,OACnB2D,QAlFsB,WAC5BC,IAAKrD,GACLgB,GAAgB,IAiFVsC,UAAW,kBAAC,IAAD,OANb,uBAYF,kBAACzD,GAAD,CAAwB+C,aAAW,cAAcW,QAAS,EAAGC,YAAY,oGAAoGxE,MAAOgB,IACtL,kBAACyD,EAAA,EAAD,CACEC,IAAG,gBACHC,KAAM5C,EACN6C,iBAAkB,IAClBC,QAAS,kBAAM7C,GAAgB,IAC/B8C,QAAQ,2B,ujBCzKd,IAAM3E,GAAQ4E,cAERC,GAAcC,YAAH,MAgBXC,GAASvE,IAAOC,IAAV,MAINuE,GAAU,CACd,CACEnI,KAAM,YACNyG,MAAO,aACP2B,QAAS,CACPvC,QAAQ,EACRwC,MAAM,IAGV,CACErI,KAAM,UACNyG,MAAO,UACP2B,QAAS,CACPvC,QAAQ,EACRwC,MAAM,IAGV,CACErI,KAAM,YACNyG,MAAO,YACP2B,QAAS,CACPvC,QAAQ,EACRwC,MAAM,IAGV,CACErI,KAAM,SACNyG,MAAO,SACP2B,QAAS,CACPvC,QAAQ,EACRwC,MAAM,IAGV,CACErI,KAAM,SACNyG,MAAO,SACP2B,QAAS,CACPvC,QAAQ,EACRwC,MAAM,KAKND,GAA+B,CACnCE,WAAY,WACZC,eAAgB,WAChBC,sBAAsB,EACtBC,mBAAoB,CAAC,GAAI,GAAI,GAAI,IAAK,MAgDzBC,GA7CO,WAAO,IAAD,EACFxE,mBAAgByE,EAAO9G,SADrB,mBACnBmC,EADmB,KACb4E,EADa,OAEc1E,mBAAgB,IAF9B,mBAEnB2E,EAFmB,KAELC,EAFK,KAI1BV,GAAQS,aAAeA,EACvBT,GAAQW,aAAe,SAACC,EAA6BH,GACnDC,EAAgBD,IAGlB,IAIMI,EAAgB,WACpBL,EAAQjJ,IAAE4C,QAAQyB,KAcpB,OAXAoE,GAAQc,cAAgB,kBACpB,oCACE,kBAACC,EAAA,EAAD,CAASC,MAAO,kBACd,kBAACC,EAAA,EAAD,CAAYjC,QAAS6B,GACnB,kBAAC,IAAD,UAQR,kBAAC,IAAD,CAAkB9F,MAAOA,IACvB,kBAAC+E,GAAD,KACE,kBAACF,GAAD,MAEA,kBAAC,IAAD,CACEoB,MAAO,gBACPpF,KAAMA,EACNmE,QAASA,GACTC,QAASA,KAEX,kBAAC,GAAD,CAAYpE,KA9BQ,SAACA,EAAW6E,GACpC,OAAOlJ,IAAEuB,IAAI2H,GAAc,SAAC9I,GAAD,OAASiE,EAAKjE,EAAIuJ,cA6BvBC,CAAkBvF,EAAM6E,QC/G9BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2911d7e5.chunk.js","sourcesContent":["const _ = require(\"lodash\");\n\nconst Transformer = () => {};\n\nTransformer.transformGivenName = (obj) => {\n  if (obj.name) {\n    obj.givenName = obj.name;\n  }\n\n  return _.omit(obj, [\"name\"]);\n};\n\nTransformer.transformSurname = (obj) => {\n  if (obj.romanization) {\n    obj.surname = obj.romanization;\n    if (obj.name) {\n      obj.originalSurname = obj.name;\n    }\n  } else if (obj.name) {\n    obj.surname = obj.name;\n  }\n\n  return _.omit(obj, [\"type\", \"name\", \"romanization\"]);\n};\n\nmodule.exports = Transformer;\n","const _ = require(\"lodash\");\nconst popularGivenNames = require(\"./data/popular-given-names.json\");\nconst popularSurnamesInAsia = require(\"./data/popular-surnames-in-asia.json\");\nconst popularSurnamesInEurope = require(\"./data/popular-surnames-in-europe.json\");\nconst popularSurnamesInSouthAmerica = require(\"./data/popular-surnames-in-south-america.json\");\nconst popularSurnamesInNorthAmerica = require(\"./data/popular-surnames-in-north-america.json\");\nconst popularSurnamesInOceania = require(\"./data/popular-surnames-in-oceania.json\");\nconst transform = require(\"./transformers/utils\");\n\nconst Merger = () => {};\n\nMerger.getAllSurnames = () => {\n  return [\n    ..._.map(popularSurnamesInAsia, transform.transformSurname),\n    ..._.map(popularSurnamesInEurope, transform.transformSurname),\n    ..._.map(popularSurnamesInSouthAmerica, transform.transformSurname),\n    ..._.map(popularSurnamesInNorthAmerica, transform.transformSurname),\n    ..._.map(popularSurnamesInOceania, transform.transformSurname),\n  ];\n};\n\nMerger.pickMergeableDataByGroupKey = (givenNames, surnames, groupKey) => {\n  let groupedGivenNames = _.groupBy(givenNames, groupKey);\n  let groupedSurnames = _.groupBy(surnames, groupKey);\n\n  groupedGivenNames = _.pick(groupedGivenNames, Object.keys(groupedSurnames));\n  groupedSurnames = _.pick(groupedSurnames, Object.keys(groupedGivenNames));\n\n  return [groupedGivenNames, groupedSurnames];\n};\n\nMerger.merge = () => {\n  let givenNames = _.map(popularGivenNames, transform.transformGivenName);\n  let surnames = Merger.getAllSurnames();\n  [givenNames, surnames] = Merger.pickMergeableDataByGroupKey(\n    givenNames,\n    surnames,\n    \"continent\"\n  );\n\n  const result = [];\n  for (let [continent, continentGivenNames] of Object.entries(givenNames)) {\n    const continentSurnames = surnames[continent];\n    let [\n      givenNamesByRegion,\n      surnamesByRegion,\n    ] = Merger.pickMergeableDataByGroupKey(\n      continentGivenNames,\n      continentSurnames,\n      \"region\"\n    );\n    for (let [region, regionGivenNames] of Object.entries(givenNamesByRegion)) {\n      regionGivenNames = _.shuffle(regionGivenNames);\n      let regionSurnames = _.shuffle(surnamesByRegion[region]);\n      const minLength = _.min([regionGivenNames.length, regionSurnames.length]);\n\n      regionGivenNames = _.slice(regionGivenNames, 0, minLength);\n      regionSurnames = _.slice(regionSurnames, 0, minLength);\n\n      result.push(\n        ..._.zipWith(regionGivenNames, regionSurnames, (item, value) => {\n          return { ...item, ...value };\n        })\n      );\n    }\n  }\n\n  return _.shuffle(result);\n};\n\n// (async () => {\n//   const result = await Merger.merge();\n\n//   console.log(JSON.stringify(result, null, 4));\n// })();\n\n// module.exports = Merger;\n\nexport default Merger;\n","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Switch from '@material-ui/core/Switch';\nimport Snackbar from '@material-ui/core/Snackbar'\nimport copy from 'copy-to-clipboard'\nimport FileCopyIcon from '@material-ui/icons/FileCopy'\nimport Button from '@material-ui/core/Button'\n\n\ntype Props = {\n  data: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n  button: {\n    margin: theme.spacing(1),\n  }\n}))\n\nconst Container = styled.div`\n  margin: 16px;\n`\n\nconst TextareaAutosizeStyled = styled(TextareaAutosize)`\n  width: 100%;\n  max-width: 100%;\n`\n\nconst CopyHelper: React.FC<Props> = ({ data }: any) => {\n  const classes = useStyles()\n\n  const [fields, setFields] = useState<any>({'givenName': true, 'surname': true})\n  const [selectedFields, setSelectedFields] = useState<any[]>(['givenName', 'surname'])\n  const [fieldsDelimiter, setFieldsDelimiter] = useState<string>(' ')\n  const [rowDelimiter, setRowDelimiter] = useState<string>('\\n')\n  const [rowWrapper, setRowWrapper] = useState<string>('')\n  const [invertFields, setInvertFields] = useState<boolean>(false)\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false)\n\n  useEffect(() => {\n    const newSelectedFields = Object.keys(_.pickBy(fields, (v) => v === true));\n    if (invertFields) {\n      setSelectedFields(newSelectedFields.reverse())\n    } else {\n      setSelectedFields(newSelectedFields)\n    }\n}, [fields, invertFields])\n\n  const handleFieldCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFields({ ...fields, [event.target.name]: event.target.checked });\n  }\n\n  const handleFieldDelimiterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFieldsDelimiter((event.target as HTMLInputElement).value);\n  }\n\n  const handleRowDelimiterChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowDelimiter((event.target as HTMLInputElement).value.replace('\\\\n', '\\n'));\n  }\n\n  const handleRowWrapperChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowWrapper((event.target as HTMLInputElement).value);\n  }\n\n  const handleInvertFieldsChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInvertFields(event.target.checked);\n    setSelectedFields(selectedFields.reverse());\n  }\n\n  const handleCopyToClipboard = () => {\n    copy(data)\n    setOpenSnackbar(true)\n  }\n\n  data = _.join(\n    _.map(\n      data,\n      (obj) => `${rowWrapper}${_.join(\n        Object.values(\n          _.pick(\n            obj,\n            selectedFields\n          )\n        ),\n        fieldsDelimiter\n      )}${rowWrapper}`\n    ),\n    rowDelimiter\n  )\n\n  const { givenName, surname } = fields;\n  const fieldsError = [givenName, surname].filter((v) => v).length < 1\n\n  return (\n    <Container>\n      <div className={classes.root}>\n      <FormControl required error={fieldsError} component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Fields to copy</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={givenName} onChange={handleFieldCheckboxChange} name=\"givenName\" />}\n            label=\"Given Name\"\n          />\n          <FormControlLabel\n            control={<Checkbox checked={surname} onChange={handleFieldCheckboxChange} name=\"surname\" />}\n            label=\"Surname\"\n          />\n        </FormGroup>\n        {fieldsError && <FormHelperText>Pick at least one</FormHelperText>}\n      </FormControl>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Fields delimiter</FormLabel>\n        <RadioGroup aria-label=\"fields-delimiter\" name=\"fields-delimiter\" value={fieldsDelimiter} onChange={handleFieldDelimiterChange}>\n          <FormControlLabel value=\" \" control={<Radio />} label=\"Space ( )\" />\n          <FormControlLabel value=\", \" control={<Radio />} label=\"Comma (, )\" />\n        </RadioGroup>\n      </FormControl>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Row delimiter</FormLabel>\n        <RadioGroup aria-label=\"row-delimiter\" name=\"row-delimiter\" value={rowDelimiter} onChange={handleRowDelimiterChange}>\n          <FormControlLabel value=\"\\n\" control={<Radio />} label=\"Newline (\\n)\" checked={rowDelimiter === '\\n'} />\n          <FormControlLabel value=\", \" control={<Radio />} label=\"Comma (, )\" />\n          <FormControlLabel value=\"; \" control={<Radio />} label=\"Semicolon (; )\" />\n          <FormControlLabel value=\",\\n\" control={<Radio />} label=\"Comma + Newline (,\\n)\" checked={rowDelimiter === ',\\n'} />\n          <FormControlLabel value=\";\\n\" control={<Radio />} label=\"Semicolon + Newline (;\\n)\" checked={rowDelimiter === ';\\n'} />\n        </RadioGroup>\n      </FormControl>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">Row wrapper</FormLabel>\n        <RadioGroup aria-label=\"row-wrapper\" name=\"row-wrapper\" value={rowWrapper} onChange={handleRowWrapperChange}>\n          <FormControlLabel value=\"\" control={<Radio />} label=\"None\" />\n          <FormControlLabel value=\"&quot;\" control={<Radio />} label=\"Double quotes (&quot;)\" />\n          <FormControlLabel value=\"'\" control={<Radio />} label=\"Single quotes (')\" />\n        </RadioGroup>\n      </FormControl>\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n      <FormLabel component=\"legend\">Invert fields order</FormLabel>\n      <FormGroup>\n        <FormControlLabel\n          control={<Switch checked={invertFields} onChange={handleInvertFieldsChange} name=\"invert-fields\" />}\n          label=\"Invert fields order\"\n        />\n      </FormGroup>\n      <FormHelperText>It will switch \"Given Name\" and \"Surname\" when both are selected.</FormHelperText>\n    </FormControl>\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          className={classes.button}\n          onClick={handleCopyToClipboard}\n          startIcon={<FileCopyIcon />}\n        >\n          Save to clipboard\n        </Button>\n      </div>\n    </div>\n      <TextareaAutosizeStyled aria-label=\"copy helper\" rowsMin={3} placeholder=\"The rows selected from the table above will be displayed here for the ease of copying and pasting\" value={data} />\n    <Snackbar\n      key={`bottom,center`}\n      open={openSnackbar}\n      autoHideDuration={2000}\n      onClose={() => setOpenSnackbar(false)}\n      message='Copied to clipboard!'\n    />\n    </Container>\n  );\n}\n\nexport default CopyHelper;","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport MUIDataTable, { MUIDataTableOptions } from 'mui-datatables';\nimport styled, { createGlobalStyle, } from 'styled-components';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\"\n\nimport merger from './data-merger';\nimport CopyHelper from './components/CopyHelper';\n\nconst theme = createMuiTheme()\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`\n\nconst AppBox = styled.div`\n  margin: 2.5em;\n`\n\nconst columns = [\n  {\n    name: \"givenName\",\n    label: \"Given Name\",\n    options: {\n      filter: false,\n      sort: true,\n    }\n  },\n  {\n    name: \"surname\",\n    label: \"Surname\",\n    options: {\n      filter: false,\n      sort: true,\n    }\n  },\n  {\n    name: \"continent\",\n    label: \"Continent\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n  {\n    name: \"gender\",\n    label: \"Gender\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n  {\n    name: \"region\",\n    label: \"Region\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n];\n\nconst options: MUIDataTableOptions = {\n  filterType: 'checkbox',\n  selectableRows: 'multiple',\n  disableToolbarSelect: true,\n  rowsPerPageOptions: [10, 25, 50, 100, 500]\n};\n\nconst App: React.FC = () => {\n  const [data, setData] = useState<any[]>(merger.merge())\n  const [rowsSelected, setRowsSelected] = useState<any[]>([])\n\n  options.rowsSelected = rowsSelected\n  options.onRowsSelect = (_currentRowsSelected: any[], rowsSelected: any[]) => {\n    setRowsSelected(rowsSelected);\n  }\n\n  const getDataByRowIndex = (data: any, rowsSelected: any) => {\n    return _.map(rowsSelected, (obj) => data[obj.dataIndex])\n  }\n\n  const randomizeData = () => {\n    setData(_.shuffle(data))\n  }\n\n  options.customToolbar = () => (\n      <>\n        <Tooltip title={\"Randomize Data\"}>\n          <IconButton onClick={randomizeData}>\n            <ShuffleIcon />\n          </IconButton>\n        </Tooltip>\n      </>\n    );\n\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppBox>\n        <GlobalStyle />\n        {/* <Button variant=\"contained\" color=\"primary\" onClick={getPopularGivenNames}>Popular Given Names</Button> */}\n        <MUIDataTable\n          title={\"Popular names\"}\n          data={data}\n          columns={columns}\n          options={options}\n        />\n        <CopyHelper data={getDataByRowIndex(data, rowsSelected)} />\n      </AppBox>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}