{"version":3,"sources":["transformers/utils.js","data-merger.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["_","require","Transformer","transformGivenName","obj","name","givenName","omit","transformSurname","romanization","surname","originalSurname","module","exports","popularGivenNames","popularSurnamesInAsia","popularSurnamesInEurope","popularSurnamesInSouthAmerica","popularSurnamesInNorthAmerica","popularSurnamesInOceania","transform","Merger","getAllSurnames","map","pickMergeableDataByGroupKey","givenNames","surnames","groupKey","groupedGivenNames","groupBy","groupedSurnames","pick","Object","keys","merge","result","entries","continent","continentGivenNames","continentSurnames","givenNamesByRegion","surnamesByRegion","region","regionGivenNames","shuffle","regionSurnames","minLength","min","length","slice","push","zipWith","item","value","theme","createMuiTheme","GlobalStyle","createGlobalStyle","AppBox","styled","div","columns","label","options","filter","sort","filterType","selectableRows","rowsPerPageOptions","App","useState","merger","data","setData","randomizeData","customToolbar","Tooltip","title","IconButton","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71a08290.chunk.js","sourcesContent":["const _ = require(\"lodash\");\n\nconst Transformer = () => {};\n\nTransformer.transformGivenName = (obj) => {\n  if (obj.name) {\n    obj.givenName = obj.name;\n  }\n\n  return _.omit(obj, [\"name\"]);\n};\n\nTransformer.transformSurname = (obj) => {\n  if (obj.romanization) {\n    obj.surname = obj.romanization;\n    if (obj.name) {\n      obj.originalSurname = obj.name;\n    }\n  } else if (obj.name) {\n    obj.surname = obj.name;\n  }\n\n  return _.omit(obj, [\"type\", \"name\", \"romanization\"]);\n};\n\nmodule.exports = Transformer;\n","const _ = require(\"lodash\");\nconst popularGivenNames = require(\"./data/popular-given-names.json\");\nconst popularSurnamesInAsia = require(\"./data/popular-surnames-in-asia.json\");\nconst popularSurnamesInEurope = require(\"./data/popular-surnames-in-europe.json\");\nconst popularSurnamesInSouthAmerica = require(\"./data/popular-surnames-in-south-america.json\");\nconst popularSurnamesInNorthAmerica = require(\"./data/popular-surnames-in-north-america.json\");\nconst popularSurnamesInOceania = require(\"./data/popular-surnames-in-oceania.json\");\nconst transform = require(\"./transformers/utils\");\n\nconst Merger = () => {};\n\nMerger.getAllSurnames = () => {\n  return [\n    ..._.map(popularSurnamesInAsia, transform.transformSurname),\n    ..._.map(popularSurnamesInEurope, transform.transformSurname),\n    ..._.map(popularSurnamesInSouthAmerica, transform.transformSurname),\n    ..._.map(popularSurnamesInNorthAmerica, transform.transformSurname),\n    ..._.map(popularSurnamesInOceania, transform.transformSurname),\n  ];\n};\n\nMerger.pickMergeableDataByGroupKey = (givenNames, surnames, groupKey) => {\n  let groupedGivenNames = _.groupBy(givenNames, groupKey);\n  let groupedSurnames = _.groupBy(surnames, groupKey);\n\n  groupedGivenNames = _.pick(groupedGivenNames, Object.keys(groupedSurnames));\n  groupedSurnames = _.pick(groupedSurnames, Object.keys(groupedGivenNames));\n\n  return [groupedGivenNames, groupedSurnames];\n};\n\nMerger.merge = () => {\n  let givenNames = _.map(popularGivenNames, transform.transformGivenName);\n  let surnames = Merger.getAllSurnames();\n  [givenNames, surnames] = Merger.pickMergeableDataByGroupKey(\n    givenNames,\n    surnames,\n    \"continent\"\n  );\n\n  const result = [];\n  for (let [continent, continentGivenNames] of Object.entries(givenNames)) {\n    const continentSurnames = surnames[continent];\n    let [\n      givenNamesByRegion,\n      surnamesByRegion,\n    ] = Merger.pickMergeableDataByGroupKey(\n      continentGivenNames,\n      continentSurnames,\n      \"region\"\n    );\n    for (let [region, regionGivenNames] of Object.entries(givenNamesByRegion)) {\n      regionGivenNames = _.shuffle(regionGivenNames);\n      let regionSurnames = _.shuffle(surnamesByRegion[region]);\n      const minLength = _.min([regionGivenNames.length, regionSurnames.length]);\n\n      regionGivenNames = _.slice(regionGivenNames, 0, minLength);\n      regionSurnames = _.slice(regionSurnames, 0, minLength);\n\n      result.push(\n        ..._.zipWith(regionGivenNames, regionSurnames, (item, value) => {\n          return { ...item, ...value };\n        })\n      );\n    }\n  }\n\n  return _.shuffle(result);\n};\n\n// (async () => {\n//   const result = await Merger.merge();\n\n//   console.log(JSON.stringify(result, null, 4));\n// })();\n\n// module.exports = Merger;\n\nexport default Merger;\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport MUIDataTable, { MUIDataTableOptions } from 'mui-datatables';\nimport styled, { createGlobalStyle, } from 'styled-components';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\"\n\nimport merger from './data-merger';\n\nconst theme = createMuiTheme()\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n`\n\nconst AppBox = styled.div`\n  margin: 2.5em;\n`\n\nconst columns = [\n  {\n    name: \"givenName\",\n    label: \"Given Name\",\n    options: {\n      filter: false,\n      sort: true,\n    }\n  },\n  {\n    name: \"surname\",\n    label: \"Surname\",\n    options: {\n      filter: false,\n      sort: true,\n    }\n  },\n  {\n    name: \"continent\",\n    label: \"Continent\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n  {\n    name: \"gender\",\n    label: \"Gender\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n  {\n    name: \"region\",\n    label: \"Region\",\n    options: {\n      filter: true,\n      sort: true,\n    }\n  },\n];\n\nconst options: MUIDataTableOptions = {\n  filterType: 'checkbox',\n  selectableRows: 'none',\n  rowsPerPageOptions: [10, 25, 50, 100, 500]\n};\n\nconst App: React.FC = () => {\n  const [data, setData] = useState<any[]>(merger.merge())\n\n  const randomizeData = () => {\n    setData(_.shuffle(data))\n  }\n\n  options.customToolbar = () => (\n      <>\n        <Tooltip title={\"Randomize Data\"}>\n          <IconButton onClick={randomizeData}>\n            <ShuffleIcon />\n          </IconButton>\n        </Tooltip>\n      </>\n    );\n\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <AppBox>\n        <GlobalStyle />\n        {/* <Button variant=\"contained\" color=\"primary\" onClick={getPopularGivenNames}>Popular Given Names</Button> */}\n        <MUIDataTable\n          title={\"Popular names\"}\n          data={data}\n          columns={columns}\n          options={options}\n        />\n      </AppBox>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}